{"ast":null,"code":"import _objectSpread from \"C:\\\\dev\\\\react\\\\Weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\dev\\\\react\\\\Weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\dev\\\\react\\\\Weather\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\"; // import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\nimport axios from \"axios\";\nimport logo from \"./logo192.png\";\nimport \"./App.css\";\nconst BaseAddress = \"http://localhost:6600/api/\";\nvar test = 0;\nconst mockWeather = {\n  coord: {\n    lon: -0.13,\n    lat: 51.51\n  },\n  weather: [{\n    id: 804,\n    main: \"Clouds\",\n    description: \"overcast clouds\",\n    icon: \"04d\"\n  }],\n  base: \"stations\",\n  main: {\n    temp: \"\",\n    feels_like: 278.19,\n    temp_min: 280.15,\n    temp_max: 282.15,\n    pressure: 1005,\n    humidity: 93\n  },\n  visibility: 10000,\n  wind: {\n    speed: 3.6,\n    deg: 190\n  },\n  clouds: {\n    all: 90\n  },\n  dt: 1580375118,\n  sys: {\n    type: 1,\n    id: 1502,\n    country: \"GB\",\n    sunrise: 1580370168,\n    sunset: 1580402666\n  },\n  timezone: 0,\n  id: 2643743,\n  name: \"London\",\n  cod: 200\n};\n\nfunction WeatherBlock(props) {\n  const _useState = useState(mockWeather),\n        _useState2 = _slicedToArray(_useState, 2),\n        weather = _useState2[0],\n        setWeather = _useState2[1];\n\n  useEffect(() => {\n    getForecast(props.city);\n  }, []); // <-- empty dependency array\n\n  async function getForecast(city) {\n    let add = BaseAddress + `Weather/bycity/${city}`;\n    console.log(add);\n    const resp = await axios.get(add);\n    setWeather(_objectSpread({}, resp.data));\n    let data = resp.data;\n  }\n\n  return React.createElement(\"div\", {\n    class: \"weather_block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    class: \"block_header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props.city), React.createElement(\"div\", {\n    class: \"temp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    class: \"high\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, weather.main.temp, \"\\xB0\"), React.createElement(\"span\", {\n    class: \"low\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"C\")));\n}\n\nfunction App() {\n  const _useState3 = useState({\n    latitude: 0,\n    longitude: 1\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        location = _useState4[0],\n        setLocation = _useState4[1];\n\n  function setPosition(position) {\n    setLocation({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    });\n    console.log(position.coords);\n    console.log(location);\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(setPosition);\n  }, []); // <-- empty dependency array\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"header_sky\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    class: \"weather_block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, location.latitude), React.createElement(WeatherBlock, {\n    city: \"London,uk\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, location.longitude));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/dev/react/Weather/src/App.js"],"names":["React","useEffect","useState","axios","logo","BaseAddress","test","mockWeather","coord","lon","lat","weather","id","main","description","icon","base","temp","feels_like","temp_min","temp_max","pressure","humidity","visibility","wind","speed","deg","clouds","all","dt","sys","type","country","sunrise","sunset","timezone","name","cod","WeatherBlock","props","setWeather","getForecast","city","add","console","log","resp","get","data","App","latitude","longitude","location","setLocation","setPosition","position","coords","navigator","geolocation","getCurrentPosition"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\n\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\nimport axios from \"axios\"\nimport logo from \"./logo192.png\"\nimport \"./App.css\"\nconst BaseAddress = \"http://localhost:6600/api/\"\nvar test = 0\nconst mockWeather = {\n  coord: { lon: -0.13, lat: 51.51 },\n  weather: [\n    { id: 804, main: \"Clouds\", description: \"overcast clouds\", icon: \"04d\" }\n  ],\n  base: \"stations\",\n  main: {\n    temp: \"\",\n    feels_like: 278.19,\n    temp_min: 280.15,\n    temp_max: 282.15,\n    pressure: 1005,\n    humidity: 93\n  },\n  visibility: 10000,\n  wind: { speed: 3.6, deg: 190 },\n  clouds: { all: 90 },\n  dt: 1580375118,\n  sys: { type: 1, id: 1502, country: \"GB\", sunrise: 1580370168, sunset: 1580402666 },\n  timezone: 0,\n  id: 2643743,\n  name: \"London\",\n  cod: 200\n}\nfunction WeatherBlock(props) {\n  const [weather, setWeather] = useState(mockWeather)\n  useEffect(() => {\n    getForecast(props.city)\n  }, []) // <-- empty dependency array\n\n  async function getForecast(city) {\n    let add = BaseAddress + `Weather/bycity/${city}`\n    console.log(add)\n    const resp = await axios.get(add)\n    setWeather({ ...resp.data })\n    let data = resp.data\n  }\n\n  return (\n    <div class=\"weather_block\">\n      <p class=\"block_header\">{props.city}</p>\n      <div class=\"temp\">\n        <span class=\"high\">{weather.main.temp}Â°</span>\n        <span class=\"low\">C</span>\n      </div>\n    </div>\n  )\n}\nfunction App() {\n  const [location, setLocation] = useState({ latitude: 0, longitude: 1 })\n  function setPosition(position) {\n    setLocation({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    })\n    console.log(position.coords)\n    console.log(location)\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(setPosition)\n  }, []) // <-- empty dependency array\n\n  return (\n    <div>\n      <div class=\"header_sky\"></div>\n      <div class=\"weather_block\">{location.latitude}</div>\n      <WeatherBlock city=\"London,uk\" />\n      <div>{location.longitude}</div>\n    </div>\n  )\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}