{"ast":null,"code":"import _objectSpread from \"C:\\\\dev\\\\react\\\\Weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\dev\\\\react\\\\Weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\dev\\\\react\\\\Weather\\\\src\\\\MainWeather.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\"; // import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\nimport axios from \"axios\";\nimport logo from \"./logo192.png\";\nimport \"./App.css\";\nconst BaseAddress = \"http://localhost:6600/api/\";\nvar test = 0;\nconst mockWeather = {\n  coord: {\n    lon: -0.13,\n    lat: 51.51\n  },\n  weather: [{\n    id: 804,\n    main: \"Clouds\",\n    description: \"overcast clouds\",\n    icon: \"04d\"\n  }],\n  base: \"stations\",\n  main: {\n    temp: 284,\n    feels_like: 278.19,\n    temp_min: 281,\n    temp_max: 290,\n    pressure: 1005,\n    humidity: 93\n  },\n  visibility: 10000,\n  wind: {\n    speed: 3.6,\n    deg: 190\n  },\n  clouds: {\n    all: 90\n  },\n  dt: 1580375118,\n  sys: {\n    type: 1,\n    id: 1502,\n    country: \"GB\",\n    sunrise: 1580370168,\n    sunset: 1580402666\n  },\n  timezone: 0,\n  id: 2643743,\n  name: \"London\",\n  cod: 200\n};\n\nfunction WeatherBlock(props) {\n  const _useState = useState(mockWeather),\n        _useState2 = _slicedToArray(_useState, 2),\n        weather = _useState2[0],\n        setWeather = _useState2[1];\n\n  useEffect(() => {\n    if (props.city) getForecast(props.city);else {\n      navigator.geolocation.getCurrentPosition(position => {\n        let _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude;\n        getForecastLocation(latitude, longitude);\n      });\n    }\n  }, []); // <-- empty dependency array\n\n  async function getForecastLocation(latitude, longitude) {\n    // if (location.latitude === 0) return\n    let add = BaseAddress + `Weather/byloc/${latitude}/${longitude}`;\n    console.log(add);\n    const resp = await axios.get(add);\n    setWeather(_objectSpread({}, resp.data)); //setWeather({ ...mockWeather })\n    // let data = resp.data\n  }\n\n  async function getForecast(city) {\n    let add = BaseAddress + `Weather/bycity/${city}`;\n    console.log(add); // const resp = await axios.get(add)\n    // setWeather({ ...resp.data })\n\n    setWeather(_objectSpread({}, mockWeather)); // let data = resp.data\n  }\n\n  const history = useHistory();\n\n  function handleClick(event) {\n    event.preventDefault();\n    console.log(\"Payment\");\n    history.push({\n      pathname: \"/details\",\n      state: {\n        weather: weather\n      }\n    }); //  history.push(\"/home\");\n  }\n\n  return React.createElement(\"div\", {\n    class: \"weather_block\",\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    class: \"block_header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, weather.name), React.createElement(\"div\", {\n    class: \"temp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    class: \"high\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, weather.main.temp), React.createElement(\"span\", {\n    class: \"low\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"K\")));\n}\n\nfunction MainWeather() {\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        location = _useState4[0],\n        setLocation = _useState4[1]; // function setPosition(position) {\n  //   setLocation({\n  //     latitude: position.coords.latitude,\n  //     longitude: position.coords.longitude\n  //   })\n  //   console.log(position.coords)\n  //   console.log(location)\n  // }\n\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      setLocation({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    });\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"header_sky\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(WeatherBlock, {\n    gLocation: \"location\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }));\n}\n\nexport default MainWeather;","map":{"version":3,"sources":["C:/dev/react/Weather/src/MainWeather.js"],"names":["React","useEffect","useState","useHistory","axios","logo","BaseAddress","test","mockWeather","coord","lon","lat","weather","id","main","description","icon","base","temp","feels_like","temp_min","temp_max","pressure","humidity","visibility","wind","speed","deg","clouds","all","dt","sys","type","country","sunrise","sunset","timezone","name","cod","WeatherBlock","props","setWeather","city","getForecast","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getForecastLocation","add","console","log","resp","get","data","history","handleClick","event","preventDefault","push","pathname","state","MainWeather","location","setLocation"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\r\n\r\nimport axios from \"axios\"\r\nimport logo from \"./logo192.png\"\r\nimport \"./App.css\"\r\nconst BaseAddress = \"http://localhost:6600/api/\"\r\nvar test = 0\r\nconst mockWeather = {\r\n  coord: { lon: -0.13, lat: 51.51 },\r\n  weather: [\r\n    { id: 804, main: \"Clouds\", description: \"overcast clouds\", icon: \"04d\" }\r\n  ],\r\n  base: \"stations\",\r\n  main: {\r\n    temp: 284,\r\n    feels_like: 278.19,\r\n    temp_min: 281,\r\n    temp_max: 290,\r\n    pressure: 1005,\r\n    humidity: 93\r\n  },\r\n  visibility: 10000,\r\n  wind: { speed: 3.6, deg: 190 },\r\n  clouds: { all: 90 },\r\n  dt: 1580375118,\r\n  sys: { type: 1, id: 1502, country: \"GB\", sunrise: 1580370168, sunset: 1580402666 },\r\n  timezone: 0,\r\n  id: 2643743,\r\n  name: \"London\",\r\n  cod: 200\r\n}\r\nfunction WeatherBlock(props) {\r\n  const [weather, setWeather] = useState(mockWeather)\r\n  useEffect(() => {\r\n    if (props.city) getForecast(props.city)\r\n    else {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        let { latitude, longitude } = position.coords\r\n        getForecastLocation(latitude, longitude)\r\n      })\r\n    }\r\n  }, []) // <-- empty dependency array\r\n\r\n  async function getForecastLocation(latitude, longitude) {\r\n    // if (location.latitude === 0) return\r\n    let add = BaseAddress + `Weather/byloc/${latitude}/${longitude}`\r\n    console.log(add)\r\n    const resp = await axios.get(add)\r\n    setWeather({ ...resp.data })\r\n    //setWeather({ ...mockWeather })\r\n    // let data = resp.data\r\n  }\r\n\r\n  async function getForecast(city) {\r\n    let add = BaseAddress + `Weather/bycity/${city}`\r\n    console.log(add)\r\n    // const resp = await axios.get(add)\r\n    // setWeather({ ...resp.data })\r\n    setWeather({ ...mockWeather })\r\n    // let data = resp.data\r\n  }\r\n  const history = useHistory()\r\n  function handleClick(event) {\r\n    event.preventDefault()\r\n    console.log(\"Payment\")\r\n    history.push({\r\n      pathname: \"/details\",\r\n      state: { weather: weather }\r\n    })\r\n    //  history.push(\"/home\");\r\n  }\r\n\r\n  return (\r\n    <div class=\"weather_block\" onClick={handleClick}>\r\n      <p class=\"block_header\">{weather.name}</p>\r\n      <div class=\"temp\">\r\n        <span class=\"high\">{weather.main.temp}</span>\r\n        <span class=\"low\">K</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nfunction MainWeather() {\r\n  const [location, setLocation] = useState({})\r\n  // function setPosition(position) {\r\n  //   setLocation({\r\n  //     latitude: position.coords.latitude,\r\n  //     longitude: position.coords.longitude\r\n  //   })\r\n  //   console.log(position.coords)\r\n  //   console.log(location)\r\n  // }\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(async (position) => {\r\n      setLocation({\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"header_sky\"></div>\r\n      {/* <div class=\"weather_block\">{location.latitude}</div> */}\r\n      {/* <WeatherBlock city=\"London,uk\" />\r\n      <WeatherBlock city=\"Jerusalem,il\" /> */}\r\n      <WeatherBlock gLocation=\"location\" />\r\n      {/* <div>{location.longitude}</div> */}\r\n    </div>\r\n  )\r\n}\r\nexport default MainWeather\r\n"]},"metadata":{},"sourceType":"module"}