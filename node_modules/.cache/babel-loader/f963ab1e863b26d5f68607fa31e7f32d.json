{"ast":null,"code":"import _slicedToArray from \"C:\\\\dev\\\\react\\\\Players\\\\myclients\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\dev\\\\react\\\\Players\\\\myclients\\\\src\\\\stars.js\";\n// STAR MATCH - V6\nimport React, { useState, useEffect } from 'react';\nimport './stars.css';\n\nconst StarsDisplay = props => React.createElement(React.Fragment, null, utils.range(1, props.count).map(starId => React.createElement(\"div\", {\n  key: starId,\n  className: \"star\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n})));\n\nconst PlayNumber = props => React.createElement(\"button\", {\n  className: \"number\",\n  style: {\n    backgroundColor: colors[props.status]\n  },\n  onClick: () => props.onClick(props.number, props.status),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, props.number);\n\nconst PlayAgain = props => React.createElement(\"div\", {\n  className: \"game-done\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  onClick: props.onClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, \"Play Again\"));\n\nconst StarMatch = () => {\n  const _useState = useState(utils.random(1, 9)),\n        _useState2 = _slicedToArray(_useState, 2),\n        stars = _useState2[0],\n        setStars = _useState2[1];\n\n  const _useState3 = useState(utils.range(1, 9)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        availableNums = _useState4[0],\n        setAvailableNums = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        candidateNums = _useState6[0],\n        setCandidateNums = _useState6[1];\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameIsDone = availableNums.length === 0;\n\n  const resetGame = () => {\n    setStars(utils.random(1, 9));\n    setAvailableNums(utils.range(1, 9));\n    setCandidateNums([]);\n  };\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (currentStatus === 'used') {\n      return;\n    }\n\n    const newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(n => !newCandidateNums.includes(n));\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"help\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Pick 1 or more numbers that sum to the number of stars\"), React.createElement(\"div\", {\n    className: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, gameIsDone ? React.createElement(PlayAgain, {\n    onClick: resetGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }) : React.createElement(StarsDisplay, {\n    count: stars,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, utils.range(1, 9).map(number => React.createElement(PlayNumber, {\n    key: number,\n    status: numberStatus(number),\n    number: number,\n    onClick: onNumberClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Time Remaining: 10\"));\n}; // Color Theme\n\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};","map":{"version":3,"sources":["C:/dev/react/Players/myclients/src/stars.js"],"names":["React","useState","useEffect","StarsDisplay","props","utils","range","count","map","starId","PlayNumber","backgroundColor","colors","status","onClick","number","PlayAgain","StarMatch","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","candidatesAreWrong","sum","gameIsDone","length","resetGame","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","concat","filter","cn","newAvailableNums","n","randomSumIn","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push"],"mappings":"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","sourcesContent":["// STAR MATCH - V6\r\nimport React, { useState, useEffect } from 'react';\r\nimport './stars.css';\r\n\r\nconst StarsDisplay = props => (\r\n    <>\r\n        {utils.range(1, props.count).map(starId => (\r\n            <div key={starId} className=\"star\" />\r\n        ))}\r\n    </>\r\n);\r\n\r\nconst PlayNumber = props => (\r\n    <button\r\n        className=\"number\"\r\n        style={{ backgroundColor: colors[props.status] }}\r\n        onClick={() => props.onClick(props.number, props.status)}\r\n    >\r\n        {props.number}\r\n    </button>\r\n);\r\n\r\nconst PlayAgain = props => (\r\n    <div className=\"game-done\">\r\n        <button onClick={props.onClick}>Play Again</button>\r\n    </div>\r\n);\r\n\r\nconst StarMatch = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    const gameIsDone = availableNums.length === 0;\r\n\r\n    const resetGame = () => {\r\n        setStars(utils.random(1, 9));\r\n        setAvailableNums(utils.range(1, 9));\r\n        setCandidateNums([]);\r\n    };\r\n\r\n    const numberStatus = number => {\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n        if (currentStatus === 'used') {\r\n            return;\r\n        }\r\n\r\n        const newCandidateNums =\r\n            currentStatus === 'available'\r\n                ? candidateNums.concat(number)\r\n                : candidateNums.filter(cn => cn !== number);\r\n\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n                n => !newCandidateNums.includes(n)\r\n            );\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n      </div>\r\n            <div className=\"body\">\r\n                <div className=\"left\">\r\n                    {gameIsDone ? (\r\n                        <PlayAgain onClick={resetGame} />\r\n                    ) : (\r\n                            <StarsDisplay count={stars} />\r\n                        )}\r\n                </div>\r\n                <div className=\"right\">\r\n                    {utils.range(1, 9).map(number => (\r\n                        <PlayNumber\r\n                            key={number}\r\n                            status={numberStatus(number)}\r\n                            number={number}\r\n                            onClick={onNumberClick}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className=\"timer\">Time Remaining: 10</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n};\r\n\r\n// Math science\r\nconst utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n            }\r\n        }\r\n        return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}