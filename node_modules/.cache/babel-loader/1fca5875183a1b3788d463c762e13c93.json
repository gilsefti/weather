{"ast":null,"code":"import _slicedToArray from \"C:\\\\dev\\\\react\\\\Players\\\\myclients\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\dev\\\\react\\\\Players\\\\myclients\\\\src\\\\cardgame.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./cardgame.css\";\nimport axios from \"axios\";\nconst frameworks = [\"angular2\", \"angular2\", \"vue\", \"vue\", \"react\", \"react\", \"grunt\", \"grunt\", \"phantomjs\", \"phantomjs\", \"ember\", \"ember\"];\n\nfunction Card(props) {\n  let imag = props.img;\n\n  function cardClass(status) {\n    let classVal = \"\";\n    classVal = status === \"open\" || status === \"match\" ? \"memory-card flip\" : \"memory-card\";\n    return classVal;\n  }\n\n  return React.createElement(\"div\", {\n    class: cardClass(props.status),\n    onClick: props.cardClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    class: \"front-face\",\n    src: \"https://raw.githubusercontent.com/samiheikki/javascript-guessing-game/master/static/logos/\" + props.name + \".png\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    class: \"back-face\",\n    src: require(\"./img/js-badge.svg\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n}\n\nfunction MemoGame() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        cards = _useState2[0],\n        setCards = _useState2[1];\n\n  function shuffle(array) {\n    let currentIndex = array.length;\n    let temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  useEffect(() => {\n    let allCards = [];\n    let num = 0;\n    let tmpFramewroks = [...frameworks];\n    tmpFramewroks = shuffle(tmpFramewroks);\n    tmpFramewroks.forEach(element => {\n      let card = {\n        name: element,\n        status: \"closed\",\n        ind: num\n      };\n      num = num + 1;\n      allCards.push(card);\n    });\n    setCards(allCards);\n  }, []); // <-- empty dependency array\n\n  function unFlipCards() {\n    setTimeout(() => {\n      let cardsCopy = [...cards];\n      cardsCopy.forEach(card => {\n        if (card.status === \"open\") card.status = \"closed\";\n      });\n      setCards(cardsCopy);\n    }, 1500);\n  }\n\n  function handleCardClick(num) {\n    console.log(cards);\n    let cardsCopy = [...cards];\n    const openArr = cards.filter(card => card.status === \"open\");\n    if (cardsCopy[num].status === \"closed\") if (openArr.length === 0) {\n      cardsCopy[num].status = \"open\";\n      setCards(cardsCopy);\n    }\n\n    if (openArr.length === 1) {\n      if (openArr[0].name === cardsCopy[num].name) {\n        cardsCopy[openArr[0].ind].status = \"match\";\n        cardsCopy[num].status = \"match\";\n        setCards(cardsCopy);\n      } else {\n        cardsCopy[num].status = \"open\";\n        setCards(cardsCopy);\n        unFlipCards();\n      }\n    }\n\n    console.log(cards);\n  }\n\n  return React.createElement(\"div\", {\n    class: \"memory-game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, cards.map(card => React.createElement(Card, Object.assign({}, card, {\n    cardClick: () => handleCardClick(card.ind),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }))));\n}\n\nexport default MemoGame;","map":{"version":3,"sources":["C:/dev/react/Players/myclients/src/cardgame.js"],"names":["React","useState","useEffect","axios","frameworks","Card","props","imag","img","cardClass","status","classVal","cardClick","name","require","MemoGame","cards","setCards","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","allCards","num","tmpFramewroks","forEach","element","card","ind","push","unFlipCards","setTimeout","cardsCopy","handleCardClick","console","log","openArr","filter","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,UAAU,GAAG,CACjB,UADiB,EAEjB,UAFiB,EAGjB,KAHiB,EAIjB,KAJiB,EAKjB,OALiB,EAMjB,OANiB,EAOjB,OAPiB,EAQjB,OARiB,EASjB,WATiB,EAUjB,WAViB,EAWjB,OAXiB,EAYjB,OAZiB,CAAnB;;AAeA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,MAAIC,IAAI,GAAGD,KAAK,CAACE,GAAjB;;AAEA,WAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,QAAIC,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,GACND,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,OAAhC,GAA0C,kBAA1C,GAA+D,aADjE;AAEA,WAAOC,QAAP;AACD;;AACD,SACE;AAAK,IAAA,KAAK,EAAEF,SAAS,CAACH,KAAK,CAACI,MAAP,CAArB;AAAqC,IAAA,OAAO,EAAEJ,KAAK,CAACM,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAC,YADR;AAEE,IAAA,GAAG,EACD,+FACAN,KAAK,CAACO,IADN,GAEA,MALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE;AAAK,IAAA,KAAK,EAAC,WAAX;AAAuB,IAAA,GAAG,EAAEC,OAAO,CAAC,oBAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD;;AAED,SAASC,QAAT,GAAoB;AAAA,oBACQd,QAAQ,CAAC,EAAD,CADhB;AAAA;AAAA,QACXe,KADW;AAAA,QACJC,QADI;;AAElB,WAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AACA,QAAIC,cAAJ,EAAoBC,WAApB;;AACA,WAAO,MAAMH,YAAb,EAA2B;AACzBG,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,MAAAA,YAAY,IAAI,CAAhB;AACAE,MAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,MAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,MAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AACD,WAAOH,KAAP;AACD;;AACDjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,QAAQ,GAAG,EAAf;AACA,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,aAAa,GAAG,CAAC,GAAGzB,UAAJ,CAApB;AACAyB,IAAAA,aAAa,GAAGX,OAAO,CAACW,aAAD,CAAvB;AACAA,IAAAA,aAAa,CAACC,OAAd,CAAuBC,OAAD,IAAa;AACjC,UAAIC,IAAI,GAAG;AAAEnB,QAAAA,IAAI,EAAEkB,OAAR;AAAiBrB,QAAAA,MAAM,EAAE,QAAzB;AAAmCuB,QAAAA,GAAG,EAAEL;AAAxC,OAAX;AACAA,MAAAA,GAAG,GAAGA,GAAG,GAAG,CAAZ;AAEAD,MAAAA,QAAQ,CAACO,IAAT,CAAcF,IAAd;AACD,KALD;AAOAf,IAAAA,QAAQ,CAACU,QAAD,CAAR;AACD,GAbQ,EAaN,EAbM,CAAT,CAdkB,CA2BX;;AAEP,WAASQ,WAAT,GAAuB;AACrBC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAIC,SAAS,GAAG,CAAC,GAAGrB,KAAJ,CAAhB;AACAqB,MAAAA,SAAS,CAACP,OAAV,CAAmBE,IAAD,IAAU;AAC1B,YAAIA,IAAI,CAACtB,MAAL,KAAgB,MAApB,EAA4BsB,IAAI,CAACtB,MAAL,GAAc,QAAd;AAC7B,OAFD;AAGAO,MAAAA,QAAQ,CAACoB,SAAD,CAAR;AACD,KANS,EAMP,IANO,CAAV;AAOD;;AACD,WAASC,eAAT,CAAyBV,GAAzB,EAA8B;AAC5BW,IAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAZ;AACA,QAAIqB,SAAS,GAAG,CAAC,GAAGrB,KAAJ,CAAhB;AACA,UAAMyB,OAAO,GAAGzB,KAAK,CAAC0B,MAAN,CAAcV,IAAD,IAAUA,IAAI,CAACtB,MAAL,KAAgB,MAAvC,CAAhB;AACA,QAAI2B,SAAS,CAACT,GAAD,CAAT,CAAelB,MAAf,KAA0B,QAA9B,EACE,IAAI+B,OAAO,CAACpB,MAAR,KAAmB,CAAvB,EAA0B;AACxBgB,MAAAA,SAAS,CAACT,GAAD,CAAT,CAAelB,MAAf,GAAwB,MAAxB;AACAO,MAAAA,QAAQ,CAACoB,SAAD,CAAR;AACD;;AACH,QAAII,OAAO,CAACpB,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAIoB,OAAO,CAAC,CAAD,CAAP,CAAW5B,IAAX,KAAoBwB,SAAS,CAACT,GAAD,CAAT,CAAef,IAAvC,EAA6C;AAC3CwB,QAAAA,SAAS,CAACI,OAAO,CAAC,CAAD,CAAP,CAAWR,GAAZ,CAAT,CAA0BvB,MAA1B,GAAmC,OAAnC;AACA2B,QAAAA,SAAS,CAACT,GAAD,CAAT,CAAelB,MAAf,GAAwB,OAAxB;AACAO,QAAAA,QAAQ,CAACoB,SAAD,CAAR;AACD,OAJD,MAIO;AACLA,QAAAA,SAAS,CAACT,GAAD,CAAT,CAAelB,MAAf,GAAwB,MAAxB;AACAO,QAAAA,QAAQ,CAACoB,SAAD,CAAR;AACAF,QAAAA,WAAW;AACZ;AACF;;AACDI,IAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAZ;AACD;;AACD,SACE;AAAK,IAAA,KAAK,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAAC2B,GAAN,CAAWX,IAAD,IACT,oBAAC,IAAD,oBAAUA,IAAV;AAAgB,IAAA,SAAS,EAAE,MAAMM,eAAe,CAACN,IAAI,CAACC,GAAN,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CADH,CADF;AAOD;;AACD,eAAelB,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport \"./cardgame.css\"\r\nimport axios from \"axios\"\r\nconst frameworks = [\r\n  \"angular2\",\r\n  \"angular2\",\r\n  \"vue\",\r\n  \"vue\",\r\n  \"react\",\r\n  \"react\",\r\n  \"grunt\",\r\n  \"grunt\",\r\n  \"phantomjs\",\r\n  \"phantomjs\",\r\n  \"ember\",\r\n  \"ember\"\r\n]\r\n\r\nfunction Card(props) {\r\n  let imag = props.img\r\n\r\n  function cardClass(status) {\r\n    let classVal = \"\"\r\n    classVal =\r\n      status === \"open\" || status === \"match\" ? \"memory-card flip\" : \"memory-card\"\r\n    return classVal\r\n  }\r\n  return (\r\n    <div class={cardClass(props.status)} onClick={props.cardClick}>\r\n      <img\r\n        class=\"front-face\"\r\n        src={\r\n          \"https://raw.githubusercontent.com/samiheikki/javascript-guessing-game/master/static/logos/\" +\r\n          props.name +\r\n          \".png\"\r\n        }\r\n      />\r\n      <img class=\"back-face\" src={require(\"./img/js-badge.svg\")}></img>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction MemoGame() {\r\n  const [cards, setCards] = useState([])\r\n  function shuffle(array) {\r\n    let currentIndex = array.length\r\n    let temporaryValue, randomIndex\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex)\r\n      currentIndex -= 1\r\n      temporaryValue = array[currentIndex]\r\n      array[currentIndex] = array[randomIndex]\r\n      array[randomIndex] = temporaryValue\r\n    }\r\n    return array\r\n  }\r\n  useEffect(() => {\r\n    let allCards = []\r\n    let num = 0\r\n    let tmpFramewroks = [...frameworks]\r\n    tmpFramewroks = shuffle(tmpFramewroks)\r\n    tmpFramewroks.forEach((element) => {\r\n      let card = { name: element, status: \"closed\", ind: num }\r\n      num = num + 1\r\n\r\n      allCards.push(card)\r\n    })\r\n\r\n    setCards(allCards)\r\n  }, []) // <-- empty dependency array\r\n\r\n  function unFlipCards() {\r\n    setTimeout(() => {\r\n      let cardsCopy = [...cards]\r\n      cardsCopy.forEach((card) => {\r\n        if (card.status === \"open\") card.status = \"closed\"\r\n      })\r\n      setCards(cardsCopy)\r\n    }, 1500)\r\n  }\r\n  function handleCardClick(num) {\r\n    console.log(cards)\r\n    let cardsCopy = [...cards]\r\n    const openArr = cards.filter((card) => card.status === \"open\")\r\n    if (cardsCopy[num].status === \"closed\")\r\n      if (openArr.length === 0) {\r\n        cardsCopy[num].status = \"open\"\r\n        setCards(cardsCopy)\r\n      }\r\n    if (openArr.length === 1) {\r\n      if (openArr[0].name === cardsCopy[num].name) {\r\n        cardsCopy[openArr[0].ind].status = \"match\"\r\n        cardsCopy[num].status = \"match\"\r\n        setCards(cardsCopy)\r\n      } else {\r\n        cardsCopy[num].status = \"open\"\r\n        setCards(cardsCopy)\r\n        unFlipCards()\r\n      }\r\n    }\r\n    console.log(cards)\r\n  }\r\n  return (\r\n    <div class=\"memory-game\">\r\n      {cards.map((card) => (\r\n        <Card {...card} cardClick={() => handleCardClick(card.ind)} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\nexport default MemoGame\r\n"]},"metadata":{},"sourceType":"module"}